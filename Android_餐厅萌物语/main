Import "zm.luae"
Import "Cjson.lua"

////////////////////////////////////////////////
// 餐厅萌物语的准备工作                        //
////////////////////////////////////////////////
KeepScreen True
zm.Init 
zm.SetFindPic {"sim": 0.9, "timeout": 5000, "delaytime": 1000, "showlog": "显示"}
zm.SetFindMultiColor {"sim": 1.0, "timeout": 5000, "delaytime": 1000, "showlog": "显示"}
zm.SetTap {"showlog":"显示"}
zm.SetCmpColorEx {"sim":1.0, "timeout":500, "delaytime":100, "showlog":"显示"}

// 确认屏幕状况
Dim screen_width = GetScreenX()
Dim screen_height = GetScreenY()
Dim screen_orientation_landscape = CBool(GetScreenRotation() Mod 2 = 1)

// 定义静态全局变量
Dim EMPTY_ARRAY()

// 准备好根目录
Dim ROOT_FOLDER = GetTempDir()&"workspace/Android_CanTinMengWuYu"
Dir.Create(ROOT_FOLDER)
PutAttachment ROOT_FOLDER,"餐厅萌物语配置_模拟器.json"
PutAttachment ROOT_FOLDER,"餐厅萌物语料理.json"

////////////////////////////////////////////////
// 餐厅萌物语的全局配置                        //
////////////////////////////////////////////////
Dim 餐厅萌物语配置 = Cjson.Decode(zm.FileRead(ROOT_FOLDER&"/餐厅萌物语配置_模拟器.json"))
Dim 餐厅萌物语料理全部 = Cjson.Decode(zm.FileRead(ROOT_FOLDER&"/餐厅萌物语料理.json"))

////////////////////////////////////////////////
// 餐厅萌物语的 UI 代码                        //
////////////////////////////////////////////////
Dim 餐厅萌物语界面()

////////////////////////////////////////////////
// 通用界面                                    //
////////////////////////////////////////////////
餐厅萌物语界面["通用界面_标题"] = "萌餐厅物语"
餐厅萌物语界面["通用界面_标签标题"] = "萌餐厅物语标签"
餐厅萌物语界面["通用界面_标签列表"] = Array("通用", "店员", "料理", "宣传", "好友")
Dim 餐厅萌物语界面_详细设置_标签1 = "——————详细设置："
Dim 餐厅萌物语界面_详细设置_标签2 = "——————"
Dim 餐厅萌物语界面_详细设置_标签3 = "———————————————————————————"
Dim 料理标签界面_每行最大项目数 = 3
Dim 宣传标签界面_每行最大项目数 = 3
Dim needNewLine = 0
If screen_orientation_landscape Then 
    餐厅萌物语界面_详细设置_标签1 = "—————————————————详细设置："
    餐厅萌物语界面_详细设置_标签2 = "—————————————————"
    餐厅萌物语界面_详细设置_标签3 = "—————————————————————————————————————————————————"
    料理标签界面_每行最大项目数 = 6
    宣传标签界面_每行最大项目数 = 6
End If

UI.NewLayout(餐厅萌物语界面["通用界面_标题"])
UI.AddTabHost(餐厅萌物语界面["通用界面_标题"], 餐厅萌物语界面["通用界面_标签标题"], 2800)
For Each 标签 In 餐厅萌物语界面["通用界面_标签列表"]
    UI.AddTab(餐厅萌物语界面["通用界面_标签标题"], 标签&"标签", 标签)
Next

////////////////////////////////////////////////
// 通用标签界面                                //
////////////////////////////////////////////////
餐厅萌物语界面["通用标签界面_标题"] = "通用标签"
餐厅萌物语界面["通用界面_参数_是否模拟器"] = "通用界面_是否模拟器"
餐厅萌物语界面["通用界面_参数_是否启动APP"] = "通用界面_是否需要启动餐厅萌物语"
餐厅萌物语界面["通用界面_参数_APP重启间隔"] = "通用界面_APP重启间隔"
餐厅萌物语界面["通用界面_参数_脚本运行间隔"] = "通用界面_脚本运行间隔分钟"

UI.AddCheckBox(餐厅萌物语界面["通用标签界面_标题"], 餐厅萌物语界面["通用界面_参数_是否模拟器"], "是否在模拟器上运行餐厅萌物语？", true)
InsertNewRow(餐厅萌物语界面["通用标签界面_标题"])
UI.AddCheckBox(餐厅萌物语界面["通用标签界面_标题"], 餐厅萌物语界面["通用界面_参数_是否启动APP"], "是否需要启动餐厅萌物语？", false)
InsertNewRow(餐厅萌物语界面["通用标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["通用标签界面_标题"], 餐厅萌物语界面["通用界面_参数_APP重启间隔"]&"_标签", "餐厅萌物语APP强制重启间隔分钟：")
UI.AddEditText(餐厅萌物语界面["通用标签界面_标题"], 餐厅萌物语界面["通用界面_参数_APP重启间隔"], "120", 200)
UI.SetEditInputType(餐厅萌物语界面["通用界面_参数_APP重启间隔"], 2)
InsertNewRow(餐厅萌物语界面["通用标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["通用标签界面_标题"], 餐厅萌物语界面["通用界面_参数_脚本运行间隔"]&"_标签", "脚本运行间隔分钟：")
UI.AddEditText(餐厅萌物语界面["通用标签界面_标题"], 餐厅萌物语界面["通用界面_参数_脚本运行间隔"], "5", 200)
UI.SetEditInputType(餐厅萌物语界面["通用界面_参数_脚本运行间隔"], 2)

////////////////////////////////////////////////
// 店员标签界面                                //
////////////////////////////////////////////////
餐厅萌物语界面["店员标签界面_标题"] = "店员标签"
餐厅萌物语界面["店员标签界面_店员工作模式列表"] = Array("完全平衡模式", "全力料理模式", "全力运营模式")
餐厅萌物语界面["店员标签界面_店员工作模式详细设置标签"] = "店员_店员工作模式_详细设置_标签"
餐厅萌物语界面["店员标签界面_平衡模式_组件列表"] = zm.Clone(EMPTY_ARRAY)
餐厅萌物语界面["店员标签界面_料理模式_组件列表"] = ""
餐厅萌物语界面["店员标签界面_运营模式_组件列表"] = zm.Clone(EMPTY_ARRAY)
餐厅萌物语界面["店员标签界面_参数_厨师个数上限"] = "店员_厨师个数上限"
餐厅萌物语界面["店员标签界面_参数_服务员个数上限"] = "店员_服务员个数上限"
餐厅萌物语界面["店员标签界面_参数_招待个数上限"] = "店员_招待个数上限"
餐厅萌物语界面["店员标签界面_参数_店员工作模式"] = "店员_店员工作模式"
餐厅萌物语界面["店员标签界面_参数_料理模式_服务员体力下限"] = "店员_料理模式_服务员体力下限"
餐厅萌物语界面["店员标签界面_参数_料理模式_厨师体力下限"] = "店员_料理模式_厨师体力下限"

餐厅萌物语界面["店员标签界面_店员工作模式_待切换组件列表"] = {"完全平衡模式":zm.Clone(EMPTY_ARRAY),_
	"全力料理模式":Array("店员_料理模式_厨师体力下限_标签", 餐厅萌物语界面["店员标签界面_参数_料理模式_服务员体力下限"]),_
	餐厅萌物语界面["店员标签界面_参数_料理模式_服务员体力下限"], "全力运营模式":zm.Clone(EMPTY_ARRAY)}

// 店员标签 -> 各个职业个数上限
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], "店员_各个职业个数上限_标签", "各个职业数量上限：")
Dim 店员标签界面_个数上限输入框宽度 = 200
If Not(screen_orientation_landscape) Then 
    InsertNewRow(餐厅萌物语界面["店员标签界面_标题"])
    店员标签界面_个数上限输入框宽度 = 100
End If
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_厨师个数上限"]&"_标签", "厨师：")
UI.AddEditText(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_厨师个数上限"], "5", 店员标签界面_个数上限输入框宽度)
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_服务员个数上限"]&"_标签", "，服务员：")
UI.AddEditText(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_服务员个数上限"], "4", 店员标签界面_个数上限输入框宽度)
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_招待个数上限"]&"_标签", "，招待：")
UI.AddEditText(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_招待个数上限"], "5", 店员标签界面_个数上限输入框宽度)
UI.SetEditInputType(餐厅萌物语界面["店员标签界面_参数_厨师个数上限"], 2)
UI.SetEditInputType(餐厅萌物语界面["店员标签界面_参数_服务员个数上限"], 2)
UI.SetEditInputType(餐厅萌物语界面["店员标签界面_参数_招待个数上限"], 2)
InsertNewRow(餐厅萌物语界面["店员标签界面_标题"])

// 店员标签 -> 店员工作模式
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_店员工作模式"]&"_标签", "店员工作模式：")
UI.AddSpinner(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_店员工作模式"], 餐厅萌物语界面["店员标签界面_店员工作模式列表"], 1)
UI.SetOnClick(餐厅萌物语界面["店员标签界面_参数_店员工作模式"], 店员标签界面_事件_店员工作模式改变)

InsertNewRow(餐厅萌物语界面["店员标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], "店员_店员工作模式_详细设置_标签1", 餐厅萌物语界面_详细设置_标签1)
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_店员工作模式详细设置标签"], "全力料理模式")
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], "店员_店员工作模式_详细设置_标签2", 餐厅萌物语界面_详细设置_标签2)
InsertNewRow(餐厅萌物语界面["店员标签界面_标题"])
InsertNewRow(餐厅萌物语界面["店员标签界面_标题"])

// 店员标签 -> 店员工作模式 -> 完全平衡模式
// Nothing right now

// 店员标签 -> 店员工作模式 -> 全力料理模式
UI.AddEditText(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_料理模式_服务员体力下限"], "46", 200)
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], "店员_料理模式_厨师体力下限_标签", " <= 非厨师候选人总体力 <= ")
UI.AddEditText(餐厅萌物语界面["店员标签界面_标题"], 餐厅萌物语界面["店员标签界面_参数_料理模式_厨师体力下限"], "100", 200)
UI.SetEditInputType(餐厅萌物语界面["店员标签界面_参数_料理模式_服务员体力下限"], 2)
UI.SetEditInputType(餐厅萌物语界面["店员标签界面_参数_料理模式_厨师体力下限"], 2)

// 店员标签 -> 店员工作模式 -> 全力运营模式
// Nothing right now

InsertNewRow(餐厅萌物语界面["店员标签界面_标题"])
InsertNewRow(餐厅萌物语界面["店员标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["店员标签界面_标题"], "店员_店员工作模式_详细设置_标签3", 餐厅萌物语界面_详细设置_标签3)

////////////////////////////////////////////////
// 料理标签界面                                //
////////////////////////////////////////////////
餐厅萌物语界面["料理标签界面_标题"] = "料理标签"
餐厅萌物语界面["料理标签界面_料理选择模式列表"] = Array("完全随机模式", "消耗体力模式", "指定料理模式")
餐厅萌物语界面["料理标签界面_料理选择模式详细设置标签"] = "料理_料理选择模式_详细设置_标签"
餐厅萌物语界面["料理标签界面_参数_料理选择模式"] = "料理_料理选择模式"
餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"] = "料理_快速消耗体力模式_料理选择策略"
餐厅萌物语界面["料理标签界面_参数_指定料理模式_前缀"] = "料理_指定料理模式_"
餐厅萌物语界面["料理标签界面_料理选择模式_待切换组件列表"] = {"完全随机模式":zm.Clone(EMPTY_ARRAY),_
	"消耗体力模式":Array(餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"]&"_标签1",_
					    餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"]&"_标签2",_ 
餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"]),_
	"指定料理模式":zm.Clone(EMPTY_ARRAY)}

// 料理标签 -> 料理选择模式
UI.AddTextView(餐厅萌物语界面["料理标签界面_标题"], 餐厅萌物语界面["料理标签界面_参数_料理选择模式"]&"_标签", "料理选择模式：")
UI.AddSpinner(餐厅萌物语界面["料理标签界面_标题"], 餐厅萌物语界面["料理标签界面_参数_料理选择模式"], 餐厅萌物语界面["料理标签界面_料理选择模式列表"], 0)
UI.SetOnClick(餐厅萌物语界面["料理标签界面_参数_料理选择模式"], 料理标签界面_事件_料理选择模式改变)
InsertNewRow(餐厅萌物语界面["料理标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["料理标签界面_标题"], "料理_料理选择模式_详细设置_标签1", 餐厅萌物语界面_详细设置_标签1)
UI.AddTextView(餐厅萌物语界面["料理标签界面_标题"], 餐厅萌物语界面["料理标签界面_料理选择模式详细设置标签"], "完全随机模式")
UI.AddTextView(餐厅萌物语界面["料理标签界面_标题"], "料理_料理选择模式_详细设置_标签2", 餐厅萌物语界面_详细设置_标签2)
InsertNewRow(餐厅萌物语界面["料理标签界面_标题"])

// 料理标签 -> 料理选择模式 -> 完全随机模式
// Nothing right now

// 料理标签 -> 料理选择模式 -> 消耗体力模式
UI.AddTextView(餐厅萌物语界面["料理标签界面_标题"], 餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"]&"_标签1", "选择前 ")
UI.AddEditText(餐厅萌物语界面["料理标签界面_标题"], 餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"], "2", 400)
UI.SetEditInputType(餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"], 2)
UI.AddTextView(餐厅萌物语界面["料理标签界面_标题"], 餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"]&"_标签2", " 高体力料理")

// 料理标签 -> 料理选择模式 -> 指定料理模式
For Each 料理类别 , 料理类别表格 In 餐厅萌物语料理全部
    zm.ArrayInsert(餐厅萌物语界面["料理标签界面_料理选择模式_待切换组件列表"]["指定料理模式"], InsertNewRow(餐厅萌物语界面["料理标签界面_标题"]))
    UI.AddTextView(餐厅萌物语界面["料理标签界面_标题"], 餐厅萌物语界面["料理标签界面_参数_指定料理模式_前缀"]&料理类别&"_标签", 料理类别&"：")
    zm.ArrayInsert(餐厅萌物语界面["料理标签界面_料理选择模式_待切换组件列表"]["指定料理模式"], 餐厅萌物语界面["料理标签界面_参数_指定料理模式_前缀"]&料理类别&"_标签")
    needNewLine = 0
    For Each 料理名称 , 料理信息 In 餐厅萌物语料理全部[料理类别]
        If needNewLine Mod 料理标签界面_每行最大项目数 = 0 Then
            zm.ArrayInsert(餐厅萌物语界面["料理标签界面_料理选择模式_待切换组件列表"]["指定料理模式"], InsertNewRow(餐厅萌物语界面["料理标签界面_标题"]))
        End If
        needNewLine = needNewLine + 1
        UI.AddCheckBox(餐厅萌物语界面["料理标签界面_标题"], 餐厅萌物语界面["料理标签界面_参数_指定料理模式_前缀"]&料理名称, 料理名称, false)
        zm.ArrayInsert(餐厅萌物语界面["料理标签界面_料理选择模式_待切换组件列表"]["指定料理模式"], 餐厅萌物语界面["料理标签界面_参数_指定料理模式_前缀"]&料理名称)
    Next
Next

InsertNewRow(餐厅萌物语界面["料理标签界面_标题"])
InsertNewRow(餐厅萌物语界面["料理标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["料理标签界面_标题"], "料理_料理选择模式_详细设置_标签3", 餐厅萌物语界面_详细设置_标签3)

////////////////////////////////////////////////
// 宣传标签界面                                //
////////////////////////////////////////////////
Dim 宣传标签界面_外出宣传_详细设置_标签1 = "——————指定外出宣传地点（", 宣传标签界面_外出宣传_详细设置_标签2 = "）—————"
Dim 宣传标签界面_友情协助_详细设置_标签1 = "——————指定友情协助地点（", 宣传标签界面_友情协助_详细设置_标签2 = "）—————"
Dim 宣传标签界面_外出宣传_详细设置_标签3 = "———————————————————————————"
If screen_orientation_landscape Then 
    宣传标签界面_外出宣传_详细设置_标签1 = "——————————————————指定外出宣传地点（"
    宣传标签界面_外出宣传_详细设置_标签2 = "）—————————————————"
    宣传标签界面_友情协助_详细设置_标签1 = "——————————————————指定友情协助地点（"
    宣传标签界面_友情协助_详细设置_标签2 = "）—————————————————"
    宣传标签界面_外出宣传_详细设置_标签3 = "————————————————————————————————————————————————————"
End If

餐厅萌物语界面["宣传标签界面_标题"] = "宣传标签"
餐厅萌物语界面["宣传标签界面_是否需要外出宣传列表"] = Array("否", "是")
餐厅萌物语界面["宣传标签界面_指定外出宣传详细设置标签"] = "宣传_指定外出宣传_详细设置_标签_"
餐厅萌物语界面["宣传标签界面_指定友情协助详细设置标签"] = "宣传_指定友情协助_详细设置_标签_"
餐厅萌物语界面["宣传标签界面_参数_是否需要外出宣传"] = "是否需要外出宣传"
餐厅萌物语界面["宣传标签界面_参数_指定外出宣传地点前缀"] = "外出宣传_"
餐厅萌物语界面["宣传标签界面_参数_指定友情协助地点前缀"] = "外出宣传_友情协助_"
餐厅萌物语界面["宣传标签界面_是否外出宣传_待切换组件列表"] = zm.Clone(EMPTY_ARRAY)

UI.AddTextView(餐厅萌物语界面["宣传标签界面_标题"], 餐厅萌物语界面["宣传标签界面_参数_是否需要外出宣传"]&"_标签", "是否需要外出宣传：")
UI.AddSpinner(餐厅萌物语界面["宣传标签界面_标题"], 餐厅萌物语界面["宣传标签界面_参数_是否需要外出宣传"], 餐厅萌物语界面["宣传标签界面_是否需要外出宣传列表"], 0)
UI.SetOnClick(餐厅萌物语界面["宣传标签界面_参数_是否需要外出宣传"], 宣传标签界面_事件_是否需要外出宣传)
For Each 外出宣传页码 In 餐厅萌物语配置["外出宣传页面_宣传地点列表页码"]
    InsertNewRow(餐厅萌物语界面["宣传标签界面_标题"])
    UI.AddTextView(餐厅萌物语界面["宣传标签界面_标题"], 餐厅萌物语界面["宣传标签界面_指定外出宣传详细设置标签"]&外出宣传页码, 宣传标签界面_外出宣传_详细设置_标签1&外出宣传页码&宣传标签界面_外出宣传_详细设置_标签2)
    zm.ArrayInsert(餐厅萌物语界面["宣传标签界面_是否外出宣传_待切换组件列表"], 餐厅萌物语界面["宣传标签界面_指定外出宣传详细设置标签"]&外出宣传页码)
	
    needNewLine = 0
    For Each 宣传地点 In 餐厅萌物语配置["外出宣传页面_全部宣传地点列表"][外出宣传页码]
        If needNewLine Mod 宣传标签界面_每行最大项目数 = 0 Then
            InsertNewRow(餐厅萌物语界面["宣传标签界面_标题"])
        End If
        needNewLine = needNewLine + 1
        
        UI.AddCheckBox(餐厅萌物语界面["宣传标签界面_标题"], 餐厅萌物语界面["宣传标签界面_参数_指定外出宣传地点前缀"]&宣传地点, 宣传地点, false)
        zm.ArrayInsert(餐厅萌物语界面["宣传标签界面_是否外出宣传_待切换组件列表"], 餐厅萌物语界面["宣传标签界面_参数_指定外出宣传地点前缀"]&宣传地点)
    Next
Next
For Each 外出宣传页码 In 餐厅萌物语配置["外出宣传页面_宣传地点列表页码"]
    InsertNewRow(餐厅萌物语界面["宣传标签界面_标题"])
    UI.AddTextView(餐厅萌物语界面["宣传标签界面_标题"], 餐厅萌物语界面["宣传标签界面_指定友情协助详细设置标签"]&外出宣传页码, 宣传标签界面_友情协助_详细设置_标签1&外出宣传页码&宣传标签界面_友情协助_详细设置_标签2)
    zm.ArrayInsert(餐厅萌物语界面["宣传标签界面_是否外出宣传_待切换组件列表"], 餐厅萌物语界面["宣传标签界面_指定友情协助详细设置标签"]&外出宣传页码)
	
    needNewLine = 0
    For Each 宣传地点 In 餐厅萌物语配置["外出宣传页面_全部宣传地点列表"][外出宣传页码]
        If needNewLine Mod 宣传标签界面_每行最大项目数 = 0 Then
            InsertNewRow(餐厅萌物语界面["宣传标签界面_标题"])
        End If
        needNewLine = needNewLine + 1
        
        UI.AddCheckBox(餐厅萌物语界面["宣传标签界面_标题"], 餐厅萌物语界面["宣传标签界面_参数_指定友情协助地点前缀"]&宣传地点, 宣传地点, false)
        zm.ArrayInsert(餐厅萌物语界面["宣传标签界面_是否外出宣传_待切换组件列表"], 餐厅萌物语界面["宣传标签界面_参数_指定友情协助地点前缀"]&宣传地点)
    Next
Next
InsertNewRow(餐厅萌物语界面["宣传标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["宣传标签界面_标题"], 餐厅萌物语界面["宣传标签界面_指定友情协助详细设置标签"]&"_end", 宣传标签界面_外出宣传_详细设置_标签3)
zm.ArrayInsert(餐厅萌物语界面["宣传标签界面_是否外出宣传_待切换组件列表"], 餐厅萌物语界面["宣传标签界面_指定友情协助详细设置标签"]&"_end")

////////////////////////////////////////////////
// 好友标签界面                                //
////////////////////////////////////////////////
餐厅萌物语界面["好友标签界面_标题"] = "好友标签"
餐厅萌物语界面["好友标签界面_开启收获好友资源模式选项"] = Array("否", "是")
餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"] = "好友_收获好友资源模式_详细设置_标签_"
餐厅萌物语界面["好友标签界面_参数_开启收获好友资源模式"] = "开启收获好友资源模式"
餐厅萌物语界面["好友标签界面_参数_开启收获龙珠"] = "好友页面_收获龙珠"
餐厅萌物语界面["好友标签界面_参数_开启收获钻石"] = "好友页面_收获钻石"
餐厅萌物语界面["好友标签界面_参数_开启收获金币"] = "好友页面_收获金币"
餐厅萌物语界面["好友标签界面_参数_开启收获爱心"] = "好友页面_收获爱心"
餐厅萌物语界面["好友标签界面_参数_开启点赞好友"] = "好友页面_点赞好友"
餐厅萌物语界面["好友标签界面_参数_已点赞好友次数"] = "好友页面_已点赞好友次数"
餐厅萌物语界面["好友标签界面_参数_开启借用店员"] = "好友页面_借用店员"
餐厅萌物语界面["好友标签界面_参数_已借用店员次数"] = "好友页面_已借用店员次数"
餐厅萌物语界面["好友标签界面_参数_开启浇水花朵"] = "好友页面_浇水花朵"
餐厅萌物语界面["好友标签界面_参数_已浇水花朵次数"] = "好友页面_已浇水花朵次数"
餐厅萌物语界面["好友标签界面_参数_开启施肥花朵"] = "好友页面_施肥花朵"
餐厅萌物语界面["好友标签界面_参数_已施肥花朵次数"] = "好友页面_已施肥花朵次数"
餐厅萌物语界面["好友标签界面_开启收获好友资源模式_待切换组件列表"] = Array(餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"]&"1",_
	餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"]&"2", 餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"]&"3",_
	餐厅萌物语界面["好友标签界面_参数_开启收获龙珠"], 餐厅萌物语界面["好友标签界面_参数_开启收获钻石"],_
	餐厅萌物语界面["好友标签界面_参数_开启收获金币"], 餐厅萌物语界面["好友标签界面_参数_开启收获爱心"],_
	餐厅萌物语界面["好友标签界面_参数_开启借用店员"], 餐厅萌物语界面["好友标签界面_参数_开启浇水花朵"],_
	餐厅萌物语界面["好友标签界面_参数_开启点赞好友"], 餐厅萌物语界面["好友标签界面_参数_开启施肥花朵"],_
	餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"]&"4")

UI.AddTextView(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启收获好友资源模式"]&"_标签", "是否开启收获好友资源模式：")
UI.AddSpinner(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启收获好友资源模式"], 餐厅萌物语界面["好友标签界面_开启收获好友资源模式选项"], 0)
UI.SetOnClick(餐厅萌物语界面["好友标签界面_参数_开启收获好友资源模式"], 好友标签界面_事件_开启收获好友资源模式)

InsertNewRow(餐厅萌物语界面["好友标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"]&"1", 餐厅萌物语界面_详细设置_标签1)
UI.AddTextView(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"]&"2", "收获资源模式")
UI.AddTextView(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"]&"3", 餐厅萌物语界面_详细设置_标签2)

InsertNewRow(餐厅萌物语界面["好友标签界面_标题"])
UI.AddCheckBox(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启收获龙珠"], "是否收获龙珠？", false)
UI.AddCheckBox(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启收获钻石"], "是否收获钻石？", false)
If Not(screen_orientation_landscape) Then 
    InsertNewRow(餐厅萌物语界面["好友标签界面_标题"])
End If
UI.AddCheckBox(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启收获金币"], "是否收获金币？", false)
UI.AddCheckBox(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启收获爱心"], "是否收获爱心？", false)

InsertNewRow(餐厅萌物语界面["好友标签界面_标题"])
UI.AddCheckBox(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启借用店员"], "是否借用店员？", false)
UI.AddCheckBox(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启浇水花朵"], "是否浇水花朵？", false)

If Not(screen_orientation_landscape) Then 
    InsertNewRow(餐厅萌物语界面["好友标签界面_标题"])
End If
UI.AddCheckBox(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启施肥花朵"], "是否施肥花朵？", false)
UI.AddCheckBox(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_参数_开启点赞好友"], "是否点赞好友？", false)

InsertNewRow(餐厅萌物语界面["好友标签界面_标题"])
UI.AddTextView(餐厅萌物语界面["好友标签界面_标题"], 餐厅萌物语界面["好友标签界面_收获好友资源模式详细设置标签"]&"4", 餐厅萌物语界面_详细设置_标签3)

UI.Show("萌餐厅物语")

Function InsertNewRow(name)
    Dim id = "new_row_" & zm.RndStr(4, 1 + 2 + 4, true)
    UI.NewRow(name, id)
    InsertNewRow = id
End Function

Function InsertNewLine(name)
    Dim id = "new_line_" & zm.RndStr(4, 1 + 2 + 4, true)
    UI.AddLine(name, id)
    InsertNewLine = id
End Function

Function 店员标签界面_事件_店员工作模式改变()
    Dim 当前选中的工作模式 = 餐厅萌物语界面["店员标签界面_店员工作模式列表"][zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_店员工作模式"]) + 1]
    UI.SetText(餐厅萌物语界面["店员标签界面_店员工作模式详细设置标签"], 当前选中的工作模式)
    For Each 工作模式, 组件列表 In 餐厅萌物语界面["店员标签界面_店员工作模式_待切换组件列表"]
        Dim 可见性 = 3
        If 当前选中的工作模式 = 工作模式 Then 
            可见性 = 1
        End If
        For Each 组件 In 组件列表
            UI.SetVisible(组件,可见性)
        Next
    Next
End Function

Function 料理标签界面_事件_料理选择模式改变()
    Dim 当前选中的料理模式 = 餐厅萌物语界面["料理标签界面_料理选择模式列表"][zm.GetUIValue(餐厅萌物语界面["料理标签界面_参数_料理选择模式"]) + 1]
    UI.SetText(餐厅萌物语界面["料理标签界面_料理选择模式详细设置标签"], 当前选中的料理模式)
    For Each 料理模式, 组件列表 In 餐厅萌物语界面["料理标签界面_料理选择模式_待切换组件列表"]
        Dim 可见性 = 3
        If 当前选中的料理模式 = 料理模式 Then 
            可见性 = 1
        End If
        For Each 组件 In 组件列表
            UI.SetVisible(组件,可见性)
        Next
    Next
End Function

Function 宣传标签界面_事件_是否需要外出宣传()
    Dim 可见性 = 3
    If zm.GetUIValue(餐厅萌物语界面["宣传标签界面_参数_是否需要外出宣传"]) = 1 Then 
        可见性 = 1	
    End If
    For Each 组件 In 餐厅萌物语界面["宣传标签界面_是否外出宣传_待切换组件列表"]
        UI.SetVisible(组件,可见性)
    Next
End Function

Function 好友标签界面_事件_开启收获好友资源模式()
    Dim 可见性 = 3
    If zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启收获好友资源模式"]) = 1 Then 
        可见性 = 1	
    End If
    For Each 组件 In 餐厅萌物语界面["好友标签界面_开启收获好友资源模式_待切换组件列表"]
        UI.SetVisible(组件,可见性)
    Next
End Function

Dim 餐厅萌物语料理 = Array({"类别":"日本料理", "名称":"女仆蛋包饭"},_
						  {"类别":"日本料理", "名称":"味噌拉面"},_
						  {"类别":"饮料", "名称":"可乐"},_
						  {"类别":"饮料", "名称":"橙汁"},_
						  {"类别":"饮料", "名称":"乌龙茶"},_
						  {"类别":"中华料理", "名称":"中华炒饭"},_
						  {"类别":"西式料理", "名称":"三明治"},_
						  {"类别":"中华料理", "名称":"春卷"},_
						  {"类别":"日本料理", "名称":"豚井盖饭"},_
						  {"类别":"甜点", "名称":"鲷鱼烧"},_
						  {"类别":"中华料理", "名称":"麻婆豆腐"},_
						  {"类别":"甜点", "名称":"菠萝包"},_
						  {"类别":"饮料", "名称":"雪顶咖啡"},_
						  {"类别":"中华料理", "名称":"馄饨"},_
						  {"类别":"日本料理", "名称":"水信玄饼"},_
						  {"类别":"甜点", "名称":"苹果派"},_
						  {"类别":"西式料理", "名称":"蔬菜沙拉"},_
						  {"类别":"饮料", "名称":"蔬菜汁"},_
						  {"类别":"饮料", "名称":"蛋奶酒"},_
						  {"类别":"甜点", "名称":"姜饼"},_
						  {"类别":"甜点", "名称":"独角兽纸杯蛋糕"},_
						  {"类别":"西式料理", "名称":"南瓜汤"},_
						  {"类别":"日本料理", "名称":"樱饼"},_
						  {"类别":"中华料理", "名称":"饺子"},_
						  {"类别":"日本料理", "名称":"乌冬面"},_
						  {"类别":"甜点", "名称":"水果大福"},_
						  {"类别":"甜点", "名称":"团子"},_
						  {"类别":"甜点", "名称":"泡芙"},_
						  {"类别":"饮料", "名称":"焦糖玛奇朵"},_
						  {"类别":"中华料理", "名称":"小笼包"},_
						  {"类别":"日本料理", "名称":"金枪鱼寿司"},_
						  {"类别":"甜点", "名称":"草莓蛋糕"},_
						  {"类别":"西式料理", "名称":"炸鸡块"},_
						  {"类别":"甜点", "名称":"提拉米苏"},_
						  {"类别":"甜点", "名称":"马卡龙"},_
						  {"类别":"西式料理", "名称":"汉堡"},_
						  {"类别":"中华料理", "名称":"炒面"},_
						  {"类别":"日本料理", "名称":"油炸日本豆腐"},_
						  {"类别":"西式料理", "名称":"热狗"},_
						  {"类别":"中华料理", "名称":"肉蟹煲"},_
						  {"类别":"日本料理", "名称":"日式烧肉"},_
						  {"类别":"西式料理", "名称":"意式千层面"},_
						  {"类别":"日本料理", "名称":"三文鱼刺身"},_
						  {"类别":"西式料理", "名称":"意大利烩饭"},_
						  {"类别":"西式料理", "名称":"火鸡"})

Dim 餐厅萌物语全局参数()
餐厅萌物语全局参数["通用_是否模拟器"] = zm.GetUIValue(餐厅萌物语界面["通用界面_参数_是否模拟器"])
餐厅萌物语全局参数["通用_脚本运行间隔分钟"] = CInt(zm.GetUIValue(餐厅萌物语界面["通用界面_参数_脚本运行间隔"]))
餐厅萌物语全局参数["通用_APP强制重启间隔分钟"] = CInt(zm.GetUIValue(餐厅萌物语界面["通用界面_参数_APP重启间隔"]))
餐厅萌物语全局参数["通用_休息室店员每分钟回复体力"] = 2
餐厅萌物语全局参数["通用_工作店员每分钟消耗体力"] = 0.5

餐厅萌物语全局参数["店员设置页面_可选厨师最小体力"] = 4
餐厅萌物语全局参数["店员设置页面_首行首列店员卡片中心坐标"] = {"x":620, "y":1124}
餐厅萌物语全局参数["店员设置页面_末行首列店员卡片中心坐标"] = {"x": 251, "y": 1124}
餐厅萌物语全局参数["店员设置页面_店员卡片行间距"] = 237
餐厅萌物语全局参数["店员设置页面_店员卡片列间距"] = 182
// end_x = start_x + 店员设置页面_店员卡片行间距 * 2
餐厅萌物语全局参数["店员设置页面_店员卡片翻页起止坐标"] = {"start_x": 130, "start_y": 1398, "end_x": 604, "end_y": 1398}
餐厅萌物语全局参数["店员设置页面_首行首列店员卡片体力槽起止坐标"] = {"start_x": 498, "start_y": 1092, "end_x": 521, "end_y": 1141}
餐厅萌物语全局参数["店员设置页面_末行首列店员卡片体力槽起止坐标"] = {"start_x":128, "start_y":1092, "end_x":152, "end_y":1141}
餐厅萌物语全局参数["店员设置页面_店员工位上限"] = {"厨师":CInt(zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_厨师个数上限"])),_
												   "服务生":CInt(zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_服务员个数上限"])),_
												   "招待":CInt(zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_招待个数上限"])),_
												   "休息室":0}
餐厅萌物语全局参数["店员设置页面_店员工位已分配"] = {"厨师":0, "服务生":0, "招待":0, "休息室":0}
餐厅萌物语全局参数["店员设置页面_工作模式"] = {"平衡模式": CBool(zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_店员工作模式"]) = 0),_
											   "全力料理模式": CBool(zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_店员工作模式"]) = 1),_
											   "全力运营模式": CBool(zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_店员工作模式"]) = 2)}
餐厅萌物语全局参数["店员设置页面_工作模式_全力料理模式"] = {"非厨师店员体力下限": CInt(zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_料理模式_服务员体力下限"])),_
														"非厨师店员体力上限": CInt(zm.GetUIValue(餐厅萌物语界面["店员标签界面_参数_料理模式_厨师体力下限"]))}

餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"] = {"x":553, "y":338}
餐厅萌物语全局参数["菜单页面_料理卡片间距"] = 363
餐厅萌物语全局参数["菜单页面_开启完全随机模式"] = CBool(zm.GetUIValue(餐厅萌物语界面["料理标签界面_参数_料理选择模式"]) = 0)
餐厅萌物语全局参数["菜单页面_开启消耗体力模式"] = CBool(zm.GetUIValue(餐厅萌物语界面["料理标签界面_参数_料理选择模式"]) = 1)
餐厅萌物语全局参数["菜单页面_开启指定料理模式"] = CBool(zm.GetUIValue(餐厅萌物语界面["料理标签界面_参数_料理选择模式"]) = 2)
餐厅萌物语全局参数["菜单页面_料理选择最大范围"] = CInt(zm.GetUIValue(餐厅萌物语界面["料理标签界面_参数_消耗体力模式_料理选择策略"]))

餐厅萌物语全局参数["外出宣传页面_选中的宣传地点列表"] = {"0":"0"}
餐厅萌物语全局参数["外出宣传页面_选中的友情协助列表"] = {"0":"0"}
餐厅萌物语全局参数["外出宣传页面_翻页按钮坐标"] = {"前一页":"538,100", "后一页":"538,1233"}
餐厅萌物语全局参数["外出宣传页面_首个店员卡片中心坐标"] = {"x":648, "y":478}
餐厅萌物语全局参数["外出宣传页面_首个店员卡片特征值坐标集"] = {"x":Array(720, 647, 593), "y":Array(449, 506)}
餐厅萌物语全局参数["外出宣传页面_底部特征值坐标_x"] = 720
餐厅萌物语全局参数["外出宣传页面_店员卡片间距"] = {"x":-238, "y":192}
餐厅萌物语全局参数["外出宣传页面_店员卡片布局"] = {"行数":2, "列数":6}
餐厅萌物语全局参数["外出宣传页面_添加店员上限"] = 2

餐厅萌物语全局参数["好友页面_首个好友卡片中心坐标"] = {"x":215, "y":295}
餐厅萌物语全局参数["好友页面_下个好友卡片中心坐标"] = {"x":80, "y":1600}
餐厅萌物语全局参数["好友页面_是否收获龙珠"] = zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启收获龙珠"])
餐厅萌物语全局参数["好友页面_已收获龙珠次数"] = 0
餐厅萌物语全局参数["好友页面_收获龙珠次数上限"] = 5
餐厅萌物语全局参数["好友页面_是否收获钻石"] = zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启收获钻石"])
餐厅萌物语全局参数["好友页面_已收获钻石次数"] = 0
餐厅萌物语全局参数["好友页面_收获钻石次数上限"] = 20
餐厅萌物语全局参数["好友页面_是否收获金币"] = zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启收获金币"])
餐厅萌物语全局参数["好友页面_是否收获爱心"] = zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启收获爱心"])
餐厅萌物语全局参数["好友页面_是否借用店员"] = zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启借用店员"])
餐厅萌物语全局参数["好友页面_借用店员次数上限"] = 10
餐厅萌物语全局参数["好友页面_已借用店员次数"] = 0
餐厅萌物语全局参数["好友页面_是否浇水花朵"] = zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启浇水花朵"])
餐厅萌物语全局参数["好友页面_浇水次数上限"] = 30
餐厅萌物语全局参数["好友页面_已浇水次数"] = 0
餐厅萌物语全局参数["好友页面_是否点赞好友"] = zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启点赞好友"])
餐厅萌物语全局参数["好友页面_是否施肥花朵"] = zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启施肥花朵"])
餐厅萌物语全局参数["好友页面_点赞次数上限"] = 20
餐厅萌物语全局参数["好友页面_已点赞次数"] = 0

////////////////////////////////////////////////
// Main Entrance						 	  //
////////////////////////////////////////////////
If zm.GetUIValue(餐厅萌物语界面["好友标签界面_参数_开启收获好友资源模式"]) = 1 Then 
    If 餐厅萌物语全局参数["好友页面_是否浇水花朵"] Then 
        Dim 好友页面浇水状况 = 餐厅萌物语_工具_识别好友页面浇水状况()
        If 好友页面浇水状况["浇水次数上限"] > 0 Then 
            餐厅萌物语全局参数["好友页面_浇水次数上限"] = 好友页面浇水状况["浇水次数上限"]
            餐厅萌物语全局参数["好友页面_已浇水次数"] = 好友页面浇水状况["浇水次数上限"] - 好友页面浇水状况["剩余浇水次数"]
        End If
    End If
    
    If 餐厅萌物语全局参数["好友页面_是否借用店员"] Then 
        Dim 好友页面借用店员状况 = 餐厅萌物语_工具_识别好友借用店员状况()
        If 好友页面借用店员状况["借用店员次数上限"] > 0 Then 
            餐厅萌物语全局参数["好友页面_借用店员次数上限"] = 好友页面借用店员状况["借用店员次数上限"]
            餐厅萌物语全局参数["好友页面_已借用店员次数"] = 好友页面借用店员状况["借用店员次数上限"] - 好友页面借用店员状况["剩余借用店员次数"]
        End If
    End If
    
    If zm.GetUIValue(餐厅萌物语界面["通用界面_参数_是否启动APP"]) Then 
        餐厅萌物语_启动()
        餐厅萌物语_收获好友爱心()
    Else 
        餐厅萌物语_工具_处理好友页面()
    End If
Else 
    If zm.GetUIValue(餐厅萌物语界面["通用界面_参数_是否启动APP"]) Then 
        餐厅萌物语_启动()
    End If
    
    Dim 是否需要外出宣传 = CBool(zm.GetUIValue(餐厅萌物语界面["宣传标签界面_参数_是否需要外出宣传"]) = 1)
    If 是否需要外出宣传 Then 
        zm.TableClear(餐厅萌物语全局参数["外出宣传页面_选中的宣传地点列表"])
        zm.TableClear(餐厅萌物语全局参数["外出宣传页面_选中的友情协助列表"])
        For Each 页码 In 餐厅萌物语配置["外出宣传页面_宣传地点列表页码"]
            Dim 宣传地点列表(), 下标 = 0, 友情协助表()
            For Each 地点 In 餐厅萌物语配置["外出宣传页面_全部宣传地点列表"][页码]
                If zm.GetUIValue(餐厅萌物语界面["宣传标签界面_参数_指定外出宣传地点前缀"]&地点) Then 
                    宣传地点列表(下标) = 地点
                    下标 = 下标 + 1
                End If
                餐厅萌物语全局参数["外出宣传页面_选中的友情协助列表"][地点] = zm.GetUIValue(餐厅萌物语界面["宣传标签界面_参数_指定友情协助地点前缀"]&地点)
            Next
            餐厅萌物语全局参数["外出宣传页面_选中的宣传地点列表"][页码] = zm.Clone(宣传地点列表)
        Next
    End If
    
    If 餐厅萌物语全局参数["菜单页面_开启指定料理模式"] Then 
        zm.TableClear(餐厅萌物语料理)
        Dim 指定料理体力列表(), 当前料理体力消耗, 指定料理体力列表下标, 指定料理体力列表长度
        For Each 料理类别 , 料理类别表格 In 餐厅萌物语料理全部
            For Each 料理名称 , 料理信息 In 餐厅萌物语料理全部[料理类别]
                If zm.GetUIValue(餐厅萌物语界面["料理标签界面_参数_指定料理模式_前缀"] & 料理名称) Then 
                    当前料理体力消耗 = 料理信息["体力消耗"]
                    指定料理体力列表下标 = 0
                    For Each 体力数字 In 指定料理体力列表
                        If 体力数字 > 当前料理体力消耗 Then 
                            Exit For
                        End If
                        指定料理体力列表下标 = 指定料理体力列表下标 + 1
                    Next
                    zm.ArrayInsert(指定料理体力列表, 当前料理体力消耗, 指定料理体力列表下标)
                    zm.ArrayInsert(餐厅萌物语料理, {"类别":料理类别, "名称":料理名称}, 指定料理体力列表下标)
                	指定料理体力列表长度 = 指定料理体力列表长度 + 1
                End If
            Next
        Next
        If 指定料理体力列表长度 = 1 Then 
            Dim 唯一的餐厅萌物语料理 = 餐厅萌物语料理(0)
            餐厅萌物语全局参数["通用_脚本运行间隔分钟"] = 餐厅萌物语料理全部[唯一的餐厅萌物语料理["类别"]][唯一的餐厅萌物语料理["名称"]]["时间消耗"] \ 60
            If 餐厅萌物语全局参数["通用_脚本运行间隔分钟"] > 30 Then 
                餐厅萌物语全局参数["通用_脚本运行间隔分钟"] = 30
            ElseIf 餐厅萌物语全局参数["通用_脚本运行间隔分钟"] = 0 Then
                餐厅萌物语全局参数["通用_脚本运行间隔分钟"] = 1
            End If
        End If
        餐厅萌物语全局参数["店员设置页面_可选厨师最小体力"] = 指定料理体力列表(0)
    End If
    
    Thread.SetShareVar("餐厅萌物语_发现卡屏", "false")
    Dim 餐厅萌物语主线程 = Thread.Start(餐厅萌物语_防卡屏检测, 餐厅萌物语全局参数["通用_APP强制重启间隔分钟"] * 60)
    While True
        If Thread.GetShareVar("餐厅萌物语_发现卡屏") = "true" Then 
            Thread.SetShareVar("餐厅萌物语_发现卡屏", "false")
            餐厅萌物语_启动()
        End If
        
        If 是否需要外出宣传 Then 
            餐厅萌物语_开始外出宣传()
        End If
        	
        Delay 2000 
        餐厅萌物语_收获料理()
        Delay 2000
        餐厅萌物语_调整店员()
        Delay 2000
        餐厅萌物语_开始料理()
        	
        SetupCountdownMessage("餐厅萌物语", 60 * 餐厅萌物语全局参数["通用_脚本运行间隔分钟"])
    Wend
End If

/**
处理启动
**/
Function 餐厅萌物语_启动()

    TracePrint "【餐厅萌物语】启动游戏"
    RunApp "com.catstudio.moegirlcafe2"
		
    TracePrint "【餐厅萌物语】处理弹出的登录窗口"
    zm.FindMultiColor(餐厅萌物语配置["登录页面_登录按钮"], 60000, True, "@登录页面_登录按钮")
	
    TracePrint "【餐厅萌物语】处理弹出的挂机收入窗口"
    zm.FindMultiColor 餐厅萌物语配置["首页_挂机收入弹窗_确认按钮"], 60000, True, "@首页_挂机收入弹窗_确认按钮"
	
    TracePrint "【餐厅萌物语】处理弹出的每日签到窗口"
    If zm.FindMultiColor(餐厅萌物语配置["首页_每日签到弹窗_签到按钮"], 10000, True, "@首页_每日签到弹窗_签到按钮") Then 
        If zm.FindMultiColor(餐厅萌物语配置["首页_每日签到弹窗_签到确认按钮"], True, "@首页_每日签到弹窗_签到确认按钮") Then
            zm.FindMultiColor(餐厅萌物语配置["首页_每日签到弹窗_关闭按钮"], True, "@首页_每日签到弹窗_关闭按钮")
        End If
    Else 
        zm.FindMultiColor(餐厅萌物语配置["首页_每日签到弹窗_关闭按钮"], True, "@首页_每日签到弹窗_关闭按钮")
    End If

    TracePrint "【餐厅萌物语】处理弹出的每日抽奖窗口"
    If zm.FindMultiColor(餐厅萌物语配置["首页_每日抽奖弹窗_点击抽奖按钮"], 10000, True, "@首页_每日抽奖弹窗_点击抽奖按钮") Then 
        If zm.FindMultiColor(餐厅萌物语配置["首页_每日签到弹窗_抽奖确认按钮"], 10000, True, "@首页_每日签到弹窗_抽奖确认按钮") Then
            zm.FindMultiColor(餐厅萌物语配置["首页_每日抽奖弹窗_关闭按钮"], True, "@首页_每日抽奖弹窗_关闭按钮")
        End If
    Else 
        zm.FindMultiColor(餐厅萌物语配置["首页_每日抽奖弹窗_关闭按钮"], True, "@首页_每日抽奖弹窗_关闭按钮")
    End If

    TracePrint "【餐厅萌物语】处理弹出的最新活动窗口"
    zm.FindMultiColor 餐厅萌物语配置["首页_每日活动弹窗_关闭按钮"], 10000, True, "@首页_每日活动弹窗_关闭按钮"
	
    Delay 1000
    zm.Swipe 975, 1355, 650, 1766, 500
End Function

Function 餐厅萌物语_防卡屏检测(通用_APP强制重启间隔)
    Dim 餐厅萌物语_启动时间戳 = Time()
    While True
        //  Or zm.IsDisplayDead(0, 0, screen_width, screen_height, 5000, 0.8)
        If (Time() - 餐厅萌物语_启动时间戳) > 通用_APP强制重启间隔 Then 
            KillApp "com.catstudio.moegirlcafe2"
            Thread.SetShareVar("餐厅萌物语_发现卡屏", "true")
            餐厅萌物语_启动时间戳 = Time()
        Else 
            Delay 600000
        End If
    Wend
End Function

Function 餐厅萌物语_收获料理()
    If 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["厨师"] = 0 Then 
        // 跳过
    Else 
    	Dim 首页_收获料理按钮_返回结果(), offset_x, offset_y
        While zm.FindPic(126, 180, 940, 1750, "中心", 0.8, 餐厅萌物语配置["首页_收获料理按钮"], 2000, False, "@首页_收获料理按钮", 首页_收获料理按钮_返回结果)
            Select Case 首页_收获料理按钮_返回结果(0)
            Case 0
            	// 首页_收获料理按钮
            	offset_x = 18
            	offset_y = 26
            Case 1
            	// 首页_好友金币按钮
            	offset_x = 47
            	offset_y = -7
            Case 2
            	// 首页_好友爱心按钮
            	offset_x = 44
            	offset_y = -22
            Case 3
            	// 首页_研究结束按钮
            	offset_x = 22
            	offset_y = 33
            End Select
            
            zm.Tap 首页_收获料理按钮_返回结果["x"] + offset_x, 首页_收获料理按钮_返回结果["y"] + offset_y, "@点击收获料理按钮"
            Delay 1000
            zm.FindMultiColor(餐厅萌物语配置["首页_干扰弹窗_关闭按钮"], 2000, True, "@首页_干扰弹窗_关闭按钮")
        Wend
    End If
End Function

Function 餐厅萌物语_调整店员()
	
    // 确保“店员”按钮出现在屏幕中
    zm.Tap 900, 1600, "@首页_空白处以弹出店员按钮"
	
    TracePrint "【餐厅萌物语】打开店员菜单"
    If zm.FindMultiColor(餐厅萌物语配置["首页_店员按钮"], True, "@首页_店员按钮") Then 
        If zm.FindMultiColor(餐厅萌物语配置["首页_店员设置按钮"], True, "@首页_店员设置按钮") Then 
            // 先处理休息的店员
            If zm.FindMultiColor(餐厅萌物语配置["店员设置页面_休息室按钮"], True, "@店员设置页面_休息室按钮") Then 
                餐厅萌物语_工具_遍历所有店员("餐厅萌物语_工具_移动休息室的满体力店员到待机")
            End If
            
            // 接着将低体力的工作店员调整到休息室
            If zm.FindMultiColor(餐厅萌物语配置["店员设置页面_工作店员按钮"], True, "@店员设置页面_工作店员按钮") Then 
                餐厅萌物语_工具_遍历所有店员("餐厅萌物语_工具_移动工作室的低体力店员到休息室")
            End If
            
            // 接着为待机员工分配位置
            If zm.FindMultiColor(餐厅萌物语配置["店员设置页面_待机店员按钮"], True, "@店员设置页面_待机店员按钮") Then 
                餐厅萌物语_工具_遍历所有店员("餐厅萌物语_工具_给待机店员分配工作")
            End If
            
            // 岗位分配完毕，仍有休息室空位的话
            If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"] Then 
                zm.FindMultiColor(餐厅萌物语配置["店员设置页面_休息室按钮"], True, "@店员设置页面_休息室按钮")
                If zm.FindMultiColor(餐厅萌物语配置["店员设置页面_待机店员按钮"], True, "@店员设置页面_待机店员按钮") Then 
                    餐厅萌物语_工具_遍历所有店员("餐厅萌物语_工具_给低体力待机店员分配休息")
                End If
            End If
            
            // 返回首页
            zm.FindMultiColor(餐厅萌物语配置["店员设置页面_关闭按钮"], True, "@首页_店员设置关闭按钮")
        End If
    End If
End Function

Function 餐厅萌物语_开始料理()
    If 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["厨师"] = 0 Then 
        // 跳过
    Else 
        While zm.FindPic(126, 180, 940, 1750, 餐厅萌物语配置["首页_选择料理按钮"], "+3,+28", True, "@首页_选择料理按钮")
            If zm.FindMultiColor(餐厅萌物语配置["首页_干扰弹窗_关闭按钮"], 2000, True, "@首页_干扰弹窗_关闭按钮") Then 
                // 跳过
            ElseIf zm.FindPic(餐厅萌物语配置["菜单页面_日本料理按钮"], "+20,+30", 0.7, True, "@菜单页面_日本料理按钮") Then 
                zm.Swipe 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 180, 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 1750
                zm.Swipe 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 180, 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 1750
                Delay 2000
                
                // 先定位到体力数字分隔符
                Dim 体力数字分隔符 = zm.FindPic(186, 260, 215, 444, 餐厅萌物语配置["店员设置页面_体力数字分隔符"], 0.8, False, "@菜单页面_体力数字分隔符")
    			
                If 体力数字分隔符 Then 
                    // 等待 0.5 秒，OCR 识别需要时间
                    Delay 500
                    Dim 店员剩余体力参考值 = CInt(zm.OcrNumbers(186, 260, 215, 体力数字分隔符["y"] - 4, "EAEDEA-151215"))
                    // 根据当前剩余体力决定料理哪个菜品
                    Dim 选中的料理 = 餐厅萌物语_工具_根据剩余体力选择料理(店员剩余体力参考值)
                	
                    // 根据选中的料理开始操作页面
                    Dim 选中的料理类别按钮
                    Select Case 选中的料理["类别"]
                    Case "日本料理"
                        选中的料理类别按钮 = 餐厅萌物语配置["菜单页面_日本料理按钮"]
                    Case "西式料理"
                        选中的料理类别按钮 = 餐厅萌物语配置["菜单页面_西式料理按钮"]
                    Case "中华料理"
                        选中的料理类别按钮 = 餐厅萌物语配置["菜单页面_中华料理按钮"]
                    Case "甜点"
                        选中的料理类别按钮 = 餐厅萌物语配置["菜单页面_甜点按钮"]
                    Case "饮料"
                        选中的料理类别按钮 = 餐厅萌物语配置["菜单页面_饮料按钮"]
                    End Select
                    If zm.FindPic(选中的料理类别按钮, "+20,+30", 0.7, True, "@菜单页面_料理类别按钮") Then 
                        zm.Swipe 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 180, 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 1750
                        zm.Swipe 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 180, 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 1750
                        Delay 2000
                        
                        // 下标大于 4 料理需要向左滑动
                        Dim 选中的料理当前页位置 = 餐厅萌物语料理全部[选中的料理["类别"]][选中的料理["名称"]]["下标"]
                        If 选中的料理当前页位置 > 3 Then 
                            Dim offset = 选中的料理当前页位置 - 3
                            While offset > 0
                                zm.Swipe 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"],_
                        			餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["y"] + 餐厅萌物语全局参数["菜单页面_料理卡片间距"],_
                        			餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"],_
                        			餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["y"], 1000
                                offset = offset -1
                            Wend
                            选中的料理当前页位置 = 3
                        End If
                        zm.Tap 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"],_
    				 		餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["y"] + 选中的料理当前页位置 * 餐厅萌物语全局参数["菜单页面_料理卡片间距"]
                    End If
                Else 
                    // 出问题了，找不到对应的厨师剩余体力，直接选择做‘女仆蛋包饭’
                    TracePrint 店员剩余体力参考值
                    TracePrint "出问题了，找不到对应的厨师剩余体力，直接选择做‘女仆蛋包饭’"
                    zm.Tap 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["x"], 餐厅萌物语全局参数["菜单页面_首个料理卡片中心坐标"]["y"]
                End If
            End If
        Wend
    End If
End Function

Function 餐厅萌物语_开始外出宣传()
    // 确保“外出宣传”按钮出现在屏幕中
    zm.Tap 900, 1600, "@首页_空白处以弹出外出宣传按钮"
    
    If zm.FindMultiColor(餐厅萌物语配置["首页_外出宣传按钮"], True, "@首页_外出宣传按钮") Then 
        // 初始化
        Delay 2000
        Dim 当前页码 = zm.CmpColorEx(餐厅萌物语配置["外出宣传页面_页码特征值"]["第一页"], 餐厅萌物语配置["外出宣传页面_页码特征值"]["第二页"])
        If 当前页码 Then 
            Dim 偏移量 = 当前页码(0)
            While 偏移量 > 0
                // 当前不在第一页，点击向前翻页
                zm.Tap 餐厅萌物语全局参数["外出宣传页面_翻页按钮坐标"]["前一页"], "@外出宣传页面_向前翻页"
                偏移量 = 偏移量 - 1
                Delay 2000
            Wend
    		
            For Each 页码 In 餐厅萌物语配置["外出宣传页面_宣传地点列表页码"]
                // 点击向前翻页到最后一页
                zm.Tap 餐厅萌物语全局参数["外出宣传页面_翻页按钮坐标"]["前一页"], "@外出宣传页面_向前翻页"
                Delay 2000
    			
                // 先检查是否有已完成外出宣传
                For 5
                	If zm.FindMultiColor(餐厅萌物语配置["外出宣传页面_宣传结束按钮"], 2000, True, "@外出宣传页面_宣传结束按钮") Then 
                		zm.FindMultiColor(餐厅萌物语配置["外出宣传页面_宣传结束确认按钮"], True, "@外出宣传页面_宣传结束确认按钮")
                    	Delay 2000
                	Else 
                		Exit For
                	End If
                Next
                    
                Dim 外出宣传地点列表长度 = UBound(餐厅萌物语全局参数["外出宣传页面_选中的宣传地点列表"][页码])
                If 外出宣传地点列表长度 >= 0 Then 
                    // 逐个检查外出宣传地点
                    For Each 宣传地点 In 餐厅萌物语全局参数["外出宣传页面_选中的宣传地点列表"][页码]
                        zm.Tap 餐厅萌物语配置["外出宣传页面_宣传地点坐标"][宣传地点], "@外出宣传页面_" & 宣传地点
                        Delay 1000
                        If zm.FindMultiColor(餐厅萌物语配置["外出宣传页面_正在宣传按钮"], 2000, False, "@外出宣传页面_正在宣传按钮") Then 
                            // 发现当前宣传地点正在进行外出宣传，跳过
                        Else 
                            // 添加店员开始外出宣传
                            For 餐厅萌物语全局参数["外出宣传页面_添加店员上限"]
                                If zm.FindMultiColor(餐厅萌物语配置["外出宣传页面_添加店员按钮"], True, "@外出宣传页面_添加店员按钮") Then 
                                    Delay 2000
                                    餐厅萌物语_工具_外出宣传店员选择()
                                    If zm.FindMultiColor(餐厅萌物语配置["外出宣传页面_添加店员关闭按钮"], 2000, True, "@外出宣传页面_添加店员关闭按钮") Then 
                                        // 没有店员可选, 直接关闭对话框
                                        Exit For
                                    End If 
                                End If
                            Next
                
                            // 添加友情协助店员
                            If 餐厅萌物语全局参数["外出宣传页面_选中的友情协助列表"][宣传地点] And zm.FindMultiColor(餐厅萌物语配置["外出宣传页面_友情协助按钮"], True, "@外出宣传页面_友情协助按钮") Then 
                                Delay 2000
                                餐厅萌物语_工具_外出宣传店员选择()
                                If zm.FindMultiColor(餐厅萌物语配置["外出宣传页面_添加店员关闭按钮"], 2000, True, "@外出宣传页面_添加店员关闭按钮") Then 
                                    // 没有店员可选, 直接关闭对话框
                                End If
                            End If
                
                            // 开始外出宣传
                            zm.FindMultiColor 餐厅萌物语配置["外出宣传页面_开始宣传按钮"], True, "@外出宣传页面_开始宣传按钮"
                            Delay 500
                        End If
                    Next
                End If
            Next
        Else 
            // 出问题了，没办法判断当前是第几页，直接退出
        End If
    	
        // 关闭外出宣传页面
        Delay 1000
        zm.FindMultiColor(餐厅萌物语配置["外出宣传页面_关闭按钮"], True, "@外出宣传页面_关闭按钮")
    End If
End Function

Function 餐厅萌物语_收获好友爱心()
    // 确保“好友”按钮出现在屏幕中
    zm.Tap 900, 1600, "@首页_空白处以弹出好友按钮"
    Delay 1000
    
    If zm.FindMultiColor(餐厅萌物语配置["首页_好友按钮"], True, "@首页_好友按钮") Then 
        // 点击第一个好友
        zm.Tap 餐厅萌物语全局参数["好友页面_首个好友卡片中心坐标"]["x"],_
    		餐厅萌物语全局参数["好友页面_首个好友卡片中心坐标"]["y"], "@好友页面_首个好友卡片中心坐标"
        Delay 10000
    	
    	餐厅萌物语_工具_处理好友页面()
    End If
End Function

////////////////////////////////////////////////
// 公共方法      						 	  //
////////////////////////////////////////////////

Function 餐厅萌物语_工具_遍历所有店员(店员处理动作)
    Dim 店员数量
    // 初始化全局参数
    Select Case 店员处理动作
    Case "餐厅萌物语_工具_移动休息室的满体力店员到待机"
        店员数量 = 餐厅萌物语_工具_识别店员数量()
        餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"] = 店员数量["最大数量"]
        餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] = 店员数量["已分配"]
        zm.ShowMessage("休息室："&店员数量["已分配"]&"/"&店员数量["最大数量"], 5000)
    Case "餐厅萌物语_工具_移动工作室的低体力店员到休息室"
        店员数量 = 餐厅萌物语_工具_识别店员数量()
        餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] = 0
        餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["服务生"] = 0
        餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["招待"] = 0
    Case "餐厅萌物语_工具_给待机店员分配工作", "餐厅萌物语_工具_给低体力待机店员分配休息"
        店员数量 = 餐厅萌物语_工具_识别待机店员数量()
    End Select
    
    If 店员数量["已分配"] > 0 Then
        Dim 餐厅萌物语全局参数名1 = "店员设置页面_首行首列店员卡片中心坐标"
        Dim 总行数 = 店员数量["已分配"] \ 4
        Dim 最后一行店员数量 = 店员数量["已分配"] Mod 4
        If 最后一行店员数量 > 0 Then 
            总行数 = 总行数 + 1
        Else 
            最后一行店员数量 = 4
        End If
                	
        Dim 当前行号 = 1, 当前行偏移
        Dim 当前总列数 = 4, 当前列号
        Dim 从首行计算偏移 = True
        Dim 当前店员体力状况
        Dim 是否要继续处理剩余的店员
    	
        While 当前行号 <= 总行数
            当前行偏移 = (当前行号 - 1) Mod 2
                		
            If 当前行号 >= 3 And 当前行偏移 = 0 Then 
                zm.Swipe 餐厅萌物语全局参数["店员设置页面_店员卡片翻页起止坐标"]["start_x"], 餐厅萌物语全局参数["店员设置页面_店员卡片翻页起止坐标"]["start_y"],_
                				餐厅萌物语全局参数["店员设置页面_店员卡片翻页起止坐标"]["end_x"], 餐厅萌物语全局参数["店员设置页面_店员卡片翻页起止坐标"]["end_y"], 1000
                // 遇到底部，回弹动画需要等待1秒
                Delay 1000
                If 当前行号 >= 总行数 - 1 Then 
                    从首行计算偏移 = False
                End If
            End If
                		
            If Not(从首行计算偏移) Then 
                当前行偏移 = (总行数 - 当前行号) Mod -2
                餐厅萌物语全局参数名1 = "店员设置页面_末行首列店员卡片中心坐标"
            End If
                		
            If 当前行号 = 总行数 Then 
                当前总列数 = 最后一行店员数量
            End If
                		
            For 当前列号 = 1 To 当前总列数
                zm.Tap 餐厅萌物语全局参数[餐厅萌物语全局参数名1]["x"] - 餐厅萌物语全局参数["店员设置页面_店员卡片行间距"] * 当前行偏移,_
                				餐厅萌物语全局参数[餐厅萌物语全局参数名1]["y"] + 餐厅萌物语全局参数["店员设置页面_店员卡片列间距"] * (当前列号 - 1),_
                				"@店员设置页面_休息室页面_第【" & 当前行号 & "】行第【" & 当前列号 & "】列店员"
                
                Select Case 店员处理动作
                Case "餐厅萌物语_工具_移动休息室的满体力店员到待机"
                    是否要继续处理剩余的店员 = 餐厅萌物语_工具_移动休息室的满体力店员到待机()
                Case "餐厅萌物语_工具_移动工作室的低体力店员到休息室"
                    是否要继续处理剩余的店员 = 餐厅萌物语_工具_移动工作室的低体力店员到休息室()
                Case "餐厅萌物语_工具_给待机店员分配工作"
                    是否要继续处理剩余的店员 = 餐厅萌物语_工具_给待机店员分配工作()
                Case "餐厅萌物语_工具_给低体力待机店员分配休息"
                    是否要继续处理剩余的店员 = 餐厅萌物语_工具_给低体力待机店员分配休息()
                End Select
                
                Delay 200
                If Not (是否要继续处理剩余的店员) Then 
                    Exit For
                End If
            Next
        	
            If Not (是否要继续处理剩余的店员) Then 
                Exit While
            End If
                
            当前行号 = 当前行号 + 1
        Wend
    Else 
        TracePrint "因店员数量为 0，跳过【"&店员处理动作&"】"
    End If
End Function

/**
* @return 是否要继续处理剩余的店员
*/
Function 餐厅萌物语_工具_移动休息室的满体力店员到待机()
    Dim 当前店员体力状况 = 餐厅萌物语_工具_识别店员剩余体力()
    If 当前店员体力状况["剩余体力"] = 当前店员体力状况["总体力"] Then
        zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_待机按钮"], True, "@店员设置页面_店员状态_待机按钮")
        餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] - 1
    End If
    餐厅萌物语_工具_移动休息室的满体力店员到待机 = True
End Function

/**
* @return 是否要继续处理剩余的店员
*/
Function 餐厅萌物语_工具_移动工作室的低体力店员到休息室()
    Dim 当前店员体力状况 = 餐厅萌物语_工具_识别店员剩余体力()
    Dim 当前店员工作状况 = 餐厅萌物语_工具_识别店员当前状态()
    
    Select Case 当前店员工作状况
    Case "服务生"
        If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["服务生"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["服务生"] Then 
        	If 当前店员体力状况["剩余体力"] <= (餐厅萌物语全局参数["通用_工作店员每分钟消耗体力"] * 餐厅萌物语全局参数["通用_脚本运行间隔分钟"]) Then 
            	TracePrint "当前休息室："&餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"]&"/"&餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"]	
            	If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"] Then 
                	zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_休息按钮"], True, "@店员设置页面_店员状态_休息按钮")
                	餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] + 1
            	Else 
                	zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_待机按钮"], True, "@店员设置页面_店员状态_待机按钮")
            	End If
        	Else 
            	// 体力还足够，不需要移动该店员
            	餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["服务生"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["服务生"] + 1
        	End If
        Else 
        	// 发现个数超了，直接改成待机状态
        	zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_待机按钮"], True, "@店员设置页面_店员状态_待机按钮")
        End If
    Case "厨师"
        If 当前店员体力状况["剩余体力"] < 餐厅萌物语全局参数["店员设置页面_可选厨师最小体力"] Then 
            // 连最简单的蛋包饭都做不了啦
            TracePrint "当前休息室："&餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"]&"/"&餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"]
            If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"] Then 
                zm.FindMultiColor 餐厅萌物语配置["店员设置页面_店员状态_休息按钮"], True, "@店员设置页面_店员状态_休息按钮"
                餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] + 1
            Else 
                zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_待机按钮"], True, "@店员设置页面_店员状态_待机按钮")
            End If
            
            If zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_当前店员正在烹饪警告按钮"], 2000, True, "@店员设置页面_店员状态_当前店员正在烹饪警告按钮") Then 
                // 检测到店员正在烹饪，停止移动该店员到到待机
                // 等待0.5秒，弹出框完全消失
                Delay 500
                餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] + 1
            End If
        Else 
            // 体力还足够，不需要移动该店员
            餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] + 1
        End If
    Case "招待"
    	If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["招待"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["招待"] Then 
    		If 当前店员体力状况["剩余体力"] <= (餐厅萌物语全局参数["通用_工作店员每分钟消耗体力"] * 餐厅萌物语全局参数["通用_脚本运行间隔分钟"]) Then 
            	If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"] Then 
                	zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_休息按钮"], True, "@店员设置页面_店员状态_休息按钮")
                	餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] + 1
            	Else 
                	zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_待机按钮"], True, "@店员设置页面_店员状态_待机按钮")
            	End If
        	Else 
            	// 体力还足够，不需要移动该店员
            	餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["招待"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["招待"] + 1
        	End If
        Else 
        	// 发现个数超了，直接改成待机状态
        	zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_待机按钮"], True, "@店员设置页面_店员状态_待机按钮")
        End If
    Case "研发"
        餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] + 1
    End Select
    
    餐厅萌物语_工具_移动工作室的低体力店员到休息室 = True
End Function

/**
* @return 是否要继续处理剩余的店员
*/
Function 餐厅萌物语_工具_给待机店员分配工作()
    Dim 当前店员体力状况 = 餐厅萌物语_工具_识别店员剩余体力()
    If 餐厅萌物语全局参数["店员设置页面_工作模式"]["全力料理模式"] Then 
        // 先考虑厨师候选人
        If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["厨师"] Then 
        	If 当前店员体力状况["剩余体力"] >= 餐厅萌物语全局参数["店员设置页面_可选厨师最小体力"] Then 
        		zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_厨师按钮"], True, "@店员设置页面_店员状态_厨师按钮")
                餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] + 1
            ElseIf 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"] Then 
                zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_休息按钮"], True, "@店员设置页面_店员状态_休息按钮")
                餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] + 1
            End If
        ElseIf 当前店员体力状况["剩余体力"] < (餐厅萌物语全局参数["通用_工作店员每分钟消耗体力"] * 餐厅萌物语全局参数["通用_脚本运行间隔分钟"]) Then 
            // 体力过小的店员考虑转移到休息室
            If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"] Then 
                zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_休息按钮"], True, "@店员设置页面_店员状态_休息按钮")
                餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] + 1
            End If
        ElseIf 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["招待"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["招待"] Then 
            // 接着考虑招待候选人
            If 当前店员体力状况["总体力"] <= 餐厅萌物语全局参数["店员设置页面_工作模式_全力料理模式"]["非厨师店员体力上限"] Then
                zm.FindMultiColor 餐厅萌物语配置["店员设置页面_店员状态_招待按钮"], True, "@店员设置页面_店员状态_招待按钮"
                餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["招待"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["招待"] + 1
            End If
        ElseIf 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["服务生"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["服务生"] Then
            // 最后考虑服务员候选人
            If 当前店员体力状况["总体力"] <= 餐厅萌物语全局参数["店员设置页面_工作模式_全力料理模式"]["非厨师店员体力上限"] Then
                zm.FindMultiColor 餐厅萌物语配置["店员设置页面_店员状态_服务生按钮"], True, "@店员设置页面_店员状态_服务生按钮"
                餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["服务生"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["服务生"] + 1
            End If
        End If
    End If
    
    餐厅萌物语_工具_给待机店员分配工作 = (餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["厨师"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["厨师"]) Or (餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["招待"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["招待"]) Or (餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["服务生"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["服务生"])
End Function

Function 餐厅萌物语_工具_给低体力待机店员分配休息()
    Dim 当前店员体力状况 = 餐厅萌物语_工具_识别店员剩余体力()
    TracePrint "当前休息室："&餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"]&"/"&餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"]
    If 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"] Then 
        If 当前店员体力状况["剩余体力"] < 当前店员体力状况["总体力"] Then 
            zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_休息按钮"], True, "@店员设置页面_店员状态_休息按钮")
            餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] = 餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] + 1
        End If
    End If
    餐厅萌物语_工具_给低体力待机店员分配休息 = (餐厅萌物语全局参数["店员设置页面_店员工位已分配"]["休息室"] < 餐厅萌物语全局参数["店员设置页面_店员工位上限"]["休息室"]) And 当前店员体力状况["总体力"] >= 餐厅萌物语全局参数["店员设置页面_工作模式_全力料理模式"]["非厨师店员体力下限"]  
End Function

/*
* 坐标范围：(291，201，315，366)
*/
Function 餐厅萌物语_工具_识别店员剩余体力()
    // 先定位到体力数字分隔符
    Dim 店员剩余体力 = {"总体力":0, "剩余体力":0}
    // 等待 0.5 秒动画效果
    Delay 500
    Dim 体力数字分隔符 = zm.FindPic(291, 201, 315, 366, 餐厅萌物语配置["店员设置页面_体力数字分隔符"], 0.8, False, "@店员设置页面_体力数字分隔符")
    If 体力数字分隔符 Then 
        店员剩余体力["剩余体力"] = CInt(zm.OcrNumbers(291, 201, 315, 体力数字分隔符["y"] - 4, "EAEDEA-151215"))
        店员剩余体力["总体力"] = CInt(zm.OcrNumbers(291, 体力数字分隔符["y"] + 11, 315, 366, "EAEDEA-151215"))
    End If
    餐厅萌物语_工具_识别店员剩余体力 = 店员剩余体力
End Function

Function 餐厅萌物语_工具_识别店员当前状态()
    Dim result = zm.FindMultiColor(餐厅萌物语配置["店员设置页面_店员状态_当前状态"], 666, 521, 873, 923, False, "@店员设置页面_店员状态_当前状态")
    If result Then 
        Select Case result(0)
        Case 0
            餐厅萌物语_工具_识别店员当前状态 = "服务生"
        Case 1
            餐厅萌物语_工具_识别店员当前状态 = "厨师"
        Case 2
            餐厅萌物语_工具_识别店员当前状态 = "招待"
        Case 3
            餐厅萌物语_工具_识别店员当前状态 = "休息"
        Case 4
            餐厅萌物语_工具_识别店员当前状态 = "待机"
        Case 5
            餐厅萌物语_工具_识别店员当前状态 = "宣传"
        Case 6
            餐厅萌物语_工具_识别店员当前状态 = "研发"
        End Select
    Else 
        餐厅萌物语_工具_识别店员当前状态 = "未知"
    End If
End Function

/*
* 坐标范围：(739, 1588, 773, 1696)
*/
Function 餐厅萌物语_工具_识别店员数量()
    // 先定位到店员数量数字分隔符
    Dim 店员数量 = {"最大数量":0, "已分配":0}
	
    // 等待 0.5 秒动画效果
    Delay 500
    Dim 店员数量数字分隔符 = zm.FindPic(739, 1588, 773, 1696, 餐厅萌物语配置["店员设置页面_店员数量数字分隔"], False, "@店员设置页面_店员数量数字分隔")
    If 店员数量数字分隔符 Then 
        // 等待 0.5 秒，OCR 识别需要时间
        Delay 500
        店员数量["已分配"] = CInt(zm.OcrNumbers(739, 1588, 773, 店员数量数字分隔符["y"] - 1, "EAEDEA-151215"))
        店员数量["最大数量"] = CInt(zm.OcrNumbers(739, 店员数量数字分隔符["y"] + 10, 773, 1696, "EAEDEA-151215"))
    End If
    餐厅萌物语_工具_识别店员数量 = 店员数量
End Function

/*
* 坐标范围：(739, 1588, 773, 1696)
*/
Function 餐厅萌物语_工具_识别待机店员数量()
    // 等待 0.5 秒动画效果
    Delay 500
    Dim result = CInt(zm.OcrNumbers(739, 1588, 773, 1696, "EAEDEA-151215"))
    餐厅萌物语_工具_识别待机店员数量 = {"最大数量":result, "已分配":result}
End Function

Function 餐厅萌物语_工具_识别好友页面浇水状况()
    // 先定位到店员数量数字分隔符
    Dim 浇水状况 = {"浇水次数上限":0, "剩余浇水次数":0}
	
    // 等待 0.5 秒动画效果
    Delay 500
    Dim 浇水状况数字分隔符 = zm.FindPic(1009, 1760, 1069, 1870, 餐厅萌物语配置["店员设置页面_体力数字分隔符"], 0.8, False, "@好友页面_浇水状况数字分隔符")
    If 浇水状况数字分隔符 Then 
        // 等待 0.5 秒，OCR 识别需要时间
        Delay 500
        浇水状况["剩余浇水次数"] = CInt(zm.OcrNumbers(1009, 1760, 1069, 浇水状况数字分隔符["y"] - 4, "EAEDEA-151215"))
        浇水状况["浇水次数上限"] = CInt(zm.OcrNumbers(1009, 浇水状况数字分隔符["y"] + 13, 1069, 1870, "EAEDEA-151215"))
    End If
    
    ShowMessage("好友页面浇水状况："&浇水状况["剩余浇水次数"]&"/"&浇水状况["浇水次数上限"])
    餐厅萌物语_工具_识别好友页面浇水状况 = 浇水状况
End Function

Function 餐厅萌物语_工具_识别好友借用店员状况()
    // 先定位到店员数量数字分隔符
    Dim 借用店员状况 = {"借用店员次数上限":0, "剩余借用店员次数":0}
	
    // 等待 0.5 秒动画效果
    Delay 500
    Dim 借用店员状况数字分隔符 = zm.FindPic(1009, 1270, 1069, 1390, 餐厅萌物语配置["店员设置页面_体力数字分隔符"], 0.8, False, "@好友页面_借用店员状况数字分隔符")
    If 借用店员状况数字分隔符 Then 
        // 等待 0.5 秒，OCR 识别需要时间
        Delay 500
        借用店员状况["剩余借用店员次数"] = CInt(zm.OcrNumbers(1009, 1270, 1069, 借用店员状况数字分隔符["y"] - 4, "EAEDEA-151215"))
        借用店员状况["借用店员次数上限"] = CInt(zm.OcrNumbers(1009, 借用店员状况数字分隔符["y"] + 13, 1069, 1390, "EAEDEA-151215"))
    End If
    
    ShowMessage("好友页面借用店员状况："&借用店员状况["剩余借用店员次数"]&"/"&借用店员状况["借用店员次数上限"])
    餐厅萌物语_工具_识别好友借用店员状况 = 借用店员状况
End Function

Function 餐厅萌物语_工具_按体力排序店员()
    // TODO hardcode, (755, 1150)
    Delay 500
    zm.Tap 755, 1150, "@店员设置页面_店员排序菜单"
    
    Delay 500
    zm.Tap 500, 1150, "@店员设置页面_按体力排序店员"
End Function

Function 餐厅萌物语_工具_按星级排序店员()
    // TODO hardcode, (755, 1150)
    Delay 500
    zm.Tap 755, 1150, "@店员设置页面_店员排序菜单"
    
    Delay 500
    zm.Tap 755, 1150, "@店员设置页面_按星级排序店员"
End Function

Function 餐厅萌物语_工具_根据剩余体力选择料理(当前店员剩余体力)
    Dim 总料理数量 = UBound(餐厅萌物语料理)
    Dim index, 选中的料理
    For index = 0 To 总料理数量
        选中的料理 = 餐厅萌物语料理(index)
        If 餐厅萌物语料理全部[选中的料理["类别"]][选中的料理["名称"]]["体力消耗"] > 当前店员剩余体力 Then 
            index = index - 1
            Exit For
        End If
    Next
    
    If 餐厅萌物语全局参数["菜单页面_开启完全随机模式"] Or 餐厅萌物语全局参数["菜单页面_开启指定料理模式"] Then 
        餐厅萌物语_工具_根据剩余体力选择料理 = zm.RndArrElement(餐厅萌物语料理, 0, index)
    ElseIf 餐厅萌物语全局参数["菜单页面_开启消耗体力模式"] Then
        Dim start_pos = 0
        If index >= 餐厅萌物语全局参数["菜单页面_料理选择最大范围"] Then 
            start_pos = index - 餐厅萌物语全局参数["菜单页面_料理选择最大范围"] + 1
        End If
        餐厅萌物语_工具_根据剩余体力选择料理 = zm.RndArrElement(餐厅萌物语料理, start_pos, index)
    End If
End Function

Function 餐厅萌物语_工具_处理好友页面()
    While zm.FindMultiColor(餐厅萌物语配置["首页_好友按钮"], 60000, False, "@首页_好友按钮") 
        Delay 2000
        
        餐厅萌物语_工具_遍历好友页面("餐厅萌物语_工具_收获好友楼下资源", {"完成": False, "龙珠": 0, "钻石": 0, "灶台": 0, "爱心": 0})
        
        //  借用员工
        If 餐厅萌物语全局参数["好友页面_是否借用店员"] And 餐厅萌物语全局参数["好友页面_已借用店员次数"] < 餐厅萌物语全局参数["好友页面_借用店员次数上限"] And zm.FindMultiColor(餐厅萌物语配置["好友页面_借用店员按钮"], True, "@好友页面_借用店员按钮") Then 
            Delay 500
            If zm.FindMultiColor(餐厅萌物语配置["好友页面_借用店员弹窗_借用按钮"], True, "@好友页面_借用店员弹窗_借用按钮") Then
                餐厅萌物语全局参数["好友页面_已借用店员次数"] = 餐厅萌物语全局参数["好友页面_已借用店员次数"] + 1
                Delay 1000
            End If
            zm.FindMultiColor 餐厅萌物语配置["好友页面_借用店员弹窗_关闭按钮"], True, "@好友页面_借用店员弹窗_关闭按钮"
            Delay 500
        End If
        
        // 查看是否需要上楼
        Dim 上楼按钮 = zm.FindPic(餐厅萌物语配置["好友页面_上楼按钮"], 130, 1700, 400, 1915, False, "@好友页面_上楼按钮")
        If ((餐厅萌物语全局参数["好友页面_是否浇水花朵"] And 餐厅萌物语全局参数["好友页面_已浇水次数"] < 餐厅萌物语全局参数["好友页面_浇水次数上限"]) Or 餐厅萌物语全局参数["好友页面_是否施肥花朵"]) And 上楼按钮 And 上楼按钮(0) = 0 Then 
            zm.Tap 上楼按钮(1) + 61, 上楼按钮(2) + 50, "@好友页面_上楼按钮"
            Delay 5000
            餐厅萌物语_工具_遍历好友页面("餐厅萌物语_工具_收获好友楼上资源", {"完成": False, "浇水": 0, "施肥": 0})
        End If
        
        // 进入下一个好友页面
        zm.Tap 餐厅萌物语全局参数["好友页面_下个好友卡片中心坐标"]["x"], 餐厅萌物语全局参数["好友页面_下个好友卡片中心坐标"]["y"],_
    			"@好友页面_下个好友卡片中心坐标"
    	Delay 3000
    Wend
End Function

Function 餐厅萌物语_工具_收获好友楼下资源(收获资源状况)
    If 餐厅萌物语全局参数["好友页面_是否收获钻石"] And 餐厅萌物语全局参数["好友页面_已收获钻石次数"] < 餐厅萌物语全局参数["好友页面_收获钻石次数上限"] And 收获资源状况["钻石"] = 0 And zm.FindPic(餐厅萌物语配置["好友页面_钻石按钮"], 126, 180, 940, 1750, "中心", 0.8, 2000, "+30,+35", True, "@好友页面_钻石按钮") Then 
        收获资源状况["钻石"] = 收获资源状况["钻石"] + 1
        餐厅萌物语全局参数["好友页面_已收获钻石次数"] = 餐厅萌物语全局参数["好友页面_已收获钻石次数"] + 1
        Delay 1000
        zm.Tap 730, 92
    End If
        
    If 餐厅萌物语全局参数["好友页面_是否收获龙珠"] And 餐厅萌物语全局参数["好友页面_已收获龙珠次数"] < 餐厅萌物语全局参数["好友页面_收获龙珠次数上限"] And 收获资源状况["龙珠"] = 0 And zm.FindPic(餐厅萌物语配置["好友页面_龙珠按钮"], 126, 180, 940, 1750, "中心", 0.8, 2000, "+30,+30", True, "@好友页面_龙珠按钮") Then 
        收获资源状况["龙珠"] = 收获资源状况["龙珠"] + 1
        餐厅萌物语全局参数["好友页面_已收获龙珠次数"] = 餐厅萌物语全局参数["好友页面_已收获龙珠次数"] + 1
        Delay 1000
        zm.Tap 730, 92
    End If
    
    While 餐厅萌物语全局参数["好友页面_是否收获爱心"] And 收获资源状况["爱心"] < 3 And zm.FindPic(餐厅萌物语配置["好友页面_爱心按钮"], 126, 180, 940, 1750, "中心", 0.8, 2000, "+22,+26", True, "@好友页面_爱心按钮")
        收获资源状况["爱心"] = 收获资源状况["爱心"] + 1
        Delay 500
        zm.Tap 730, 92
    Wend
                
    While 餐厅萌物语全局参数["好友页面_是否收获金币"] And 收获资源状况["灶台"] < 3 And zm.FindPic(餐厅萌物语配置["好友页面_灶台按钮"], 126, 180, 940, 1750, "中心", 0.8, 2000, "+37,+31", True, "@好友页面_灶台按钮")
        收获资源状况["灶台"] = 收获资源状况["灶台"] + 1
        Delay 500
        zm.Tap 730, 92
    Wend
    
    Dim 收获钻石状况 = Not(餐厅萌物语全局参数["好友页面_是否收获钻石"]) Or (餐厅萌物语全局参数["好友页面_是否收获钻石"] And 收获资源状况["钻石"] = 1)
    Dim 收获龙珠状况 = Not(餐厅萌物语全局参数["好友页面_是否收获龙珠"]) Or (餐厅萌物语全局参数["好友页面_是否收获龙珠"] And 收获资源状况["龙珠"] = 1)
    Dim 收获灶台状况 = Not(餐厅萌物语全局参数["好友页面_是否收获金币"]) Or (餐厅萌物语全局参数["好友页面_是否收获金币"] And 收获资源状况["灶台"] = 3)
    Dim 收获灶台爱心 = Not(餐厅萌物语全局参数["好友页面_是否收获爱心"]) Or (餐厅萌物语全局参数["好友页面_是否收获爱心"] And 收获资源状况["爱心"] = 3)
    收获资源状况["完成"] = (收获钻石状况 And 收获龙珠状况 And 收获灶台状况 And 收获灶台爱心)
    
    餐厅萌物语_工具_收获好友楼下资源 = 收获资源状况
End Function

Function 餐厅萌物语_工具_收获好友楼上资源(收获资源状况)
    If 餐厅萌物语全局参数["好友页面_是否浇水花朵"] And 餐厅萌物语全局参数["好友页面_已浇水次数"] < 餐厅萌物语全局参数["好友页面_浇水次数上限"] And 收获资源状况["浇水"] = 0 And zm.FindPic(餐厅萌物语配置["好友页面_浇水按钮"], 126, 180, 940, 1750, "中心", 0.7, 2000, "+29,+29", True, "@好友页面_浇水按钮")
        收获资源状况["浇水"] = 收获资源状况["浇水"] + 1
        Delay 1000
        zm.Tap 730, 92
        餐厅萌物语全局参数["好友页面_已浇水次数"] = 餐厅萌物语全局参数["好友页面_已浇水次数"] + 1
        Delay 500
    End If
    
    Dim 好友页面_施肥按钮_返回结果()
    If 餐厅萌物语全局参数["好友页面_是否施肥花朵"] And 收获资源状况["施肥"] = 0 And zm.FindPic(餐厅萌物语配置["好友页面_施肥按钮"], 126, 180, 940, 1750, "中心", 0.8, 2000, False, "@好友页面_施肥按钮", 好友页面_施肥按钮_返回结果) Then 
        If 好友页面_施肥按钮_返回结果["x"] > 320 And 好友页面_施肥按钮_返回结果["y"] < 1717 Then
            zm.Tap 好友页面_施肥按钮_返回结果["x"] - 161, 好友页面_施肥按钮_返回结果["y"] + 33, "@好友页面_施肥按钮_点击"
            Delay 4000
            If zm.FindPic(餐厅萌物语配置["好友页面_自动回肥_开启"], 405, 920, 470, 985, "中心", 0.8, 2000, False, "@好友页面_自动回肥_开启") Then 
                zm.FindMultiColor(餐厅萌物语配置["好友页面_确认施肥按钮"], True, "@好友页面_确认施肥按钮")
                收获资源状况["施肥"] = 收获资源状况["施肥"] + 1
                Delay 2000
                zm.Tap 730, 92
            ElseIf zm.FindPic(餐厅萌物语配置["好友页面_自动回肥_关闭"], 405, 845, 470, 905, "中心", 0.8, 2000, False, "@好友页面_自动回肥_关闭") Then 
                收获资源状况["施肥"] = 收获资源状况["施肥"] + 1
            End If
            zm.FindMultiColor(餐厅萌物语配置["好友页面_施肥弹框_关闭按钮"], True, "@好友页面_施肥弹框_关闭按钮")
            Delay 2000
        End If
    End If
    
    Dim 浇水花朵状况 = Not(餐厅萌物语全局参数["好友页面_是否浇水花朵"]) Or (餐厅萌物语全局参数["好友页面_是否浇水花朵"] And 收获资源状况["浇水"] = 1)
    Dim 施肥花朵状况 = Not(餐厅萌物语全局参数["好友页面_是否施肥花朵"]) Or (餐厅萌物语全局参数["好友页面_是否施肥花朵"] And 收获资源状况["施肥"] = 1)
    收获资源状况["完成"] = 浇水花朵状况 And 施肥花朵状况
    
    餐厅萌物语_工具_收获好友楼上资源 = 收获资源状况
End Function

Function 餐厅萌物语_工具_遍历好友页面(下一步动作, 收获资源状况)
    Dim 执行结果, 遍历好友页面_滑动等待时间 = 500
    Select Case 下一步动作
    Case "餐厅萌物语_工具_收获好友楼下资源"
        执行结果 = 餐厅萌物语_工具_收获好友楼下资源(收获资源状况)
        If Not (执行结果["完成"]) Then 
            Delay 遍历好友页面_滑动等待时间
            zm.Swipe screen_width \ 2, screen_height \ 2, screen_width \ 2 - 400, screen_height \ 2, 200
            执行结果 = 餐厅萌物语_工具_收获好友楼下资源(执行结果)
        End If
        If Not (执行结果["完成"]) Then 
            Delay 遍历好友页面_滑动等待时间
            zm.Swipe screen_width \ 2 - 400, screen_height \ 2, screen_width \ 2 + 400, screen_height \ 2, 200
            执行结果 = 餐厅萌物语_工具_收获好友楼下资源(执行结果)
        End If
        If Not (执行结果["完成"]) Then 
            Delay 遍历好友页面_滑动等待时间
            zm.Swipe screen_width \ 2 + 400, screen_height \ 2, screen_width \ 2, screen_height \ 2 + 400, 200
            执行结果 = 餐厅萌物语_工具_收获好友楼下资源(执行结果)
        End If
        If Not (执行结果["完成"]) Then 
            Delay 遍历好友页面_滑动等待时间
            zm.Swipe screen_width \ 2, screen_height \ 2 + 400, screen_width \ 2, screen_height \ 2 - 400, 200
            执行结果 = 餐厅萌物语_工具_收获好友楼下资源(执行结果)
        End If
    Case "餐厅萌物语_工具_收获好友楼上资源"
        执行结果 = 餐厅萌物语_工具_收获好友楼上资源(收获资源状况)
        If Not (执行结果["完成"]) Then 
            Delay 遍历好友页面_滑动等待时间
            zm.Swipe screen_width \ 2, screen_height \ 2, screen_width \ 2 + 400, screen_height \ 2, 200
            执行结果 = 餐厅萌物语_工具_收获好友楼上资源(执行结果)
        End If
        If Not (执行结果["完成"]) Then 
            Delay 遍历好友页面_滑动等待时间
            zm.Swipe screen_width \ 2, screen_height \ 2, screen_width \ 2 - 400, screen_height \ 2 + 400, 200
            执行结果 = 餐厅萌物语_工具_收获好友楼上资源(执行结果)
        End If
        If Not (执行结果["完成"]) Then 
            Delay 遍历好友页面_滑动等待时间
            zm.Swipe screen_width \ 2, screen_height \ 2 + 400, screen_width \ 2, screen_height \ 2 - 400, 200
            执行结果 = 餐厅萌物语_工具_收获好友楼上资源(执行结果)
        End If
    End Select
    餐厅萌物语_工具_遍历好友页面 = 执行结果
End Function

Function 餐厅萌物语_工具_外出宣传店员选择()
    // 首先翻到最底部
    Dim 底部特征值坐标_x = 餐厅萌物语全局参数["外出宣传页面_底部特征值坐标_x"] + 餐厅萌物语全局参数["外出宣传页面_店员卡片布局"]["行数"] * 餐厅萌物语全局参数["外出宣传页面_店员卡片间距"]["x"]
    Dim 底部特征值数组(), 底部特征值下标 = 0
    For Each 坐标_y In 餐厅萌物语全局参数["外出宣传页面_首个店员卡片特征值坐标集"]["y"]
        底部特征值数组(底部特征值下标) = Join(Array(CStr(底部特征值坐标_x), CStr(坐标_y), 餐厅萌物语配置["外出宣传页面_店员卡片空白背景"]), "|")
        底部特征值下标 = 底部特征值下标 + 1
    Next
    Dim 底部特征值 = Join(底部特征值数组, ",")
    While Not(zm.CmpColorEx(底部特征值))
        // 向下滑动一行后继续检测，直至最后一行
        zm.Swipe 餐厅萌物语全局参数["外出宣传页面_首个店员卡片中心坐标"]["x"] + 餐厅萌物语全局参数["外出宣传页面_店员卡片间距"]["x"],_
				 餐厅萌物语全局参数["外出宣传页面_首个店员卡片中心坐标"]["y"],_
				 餐厅萌物语全局参数["外出宣传页面_首个店员卡片中心坐标"]["x"],_
				 餐厅萌物语全局参数["外出宣传页面_首个店员卡片中心坐标"]["y"], 500
        Delay 500
    Wend
	
    Dim 行数, 列数, 发现末尾店员 = false
    For 行数 = 餐厅萌物语全局参数["外出宣传页面_店员卡片布局"]["行数"] - 1 To 0 Step -1
        For 列数 = 餐厅萌物语全局参数["外出宣传页面_店员卡片布局"]["列数"] - 1 To 0 Step -1
            Dim 当前店员卡片特征值数组(), 当前店员卡片特征值下标 = 0
            Dim 特征值坐标_x, 特征值坐标_y
            For Each 特征值坐标_x In 餐厅萌物语全局参数["外出宣传页面_首个店员卡片特征值坐标集"]["x"]
                Dim 当前店员卡片特征值_x = 特征值坐标_x + 餐厅萌物语全局参数["外出宣传页面_店员卡片间距"]["x"] * 行数
                For Each 特征值坐标_y In 餐厅萌物语全局参数["外出宣传页面_首个店员卡片特征值坐标集"]["y"]
                    当前店员卡片特征值数组(当前店员卡片特征值下标) = Join(Array(CStr(当前店员卡片特征值_x),_
						CStr(特征值坐标_y + 餐厅萌物语全局参数["外出宣传页面_店员卡片间距"]["y"] * 列数),_
						餐厅萌物语配置["外出宣传页面_店员卡片空白背景"]), "|")
                    当前店员卡片特征值下标 = 当前店员卡片特征值下标 + 1
                Next
            Next
            If zm.CmpColorEx(Join(当前店员卡片特征值数组, ",")) Then 
                // 检测到空白，继续检测下一个
            Else 
                发现末尾店员 = true
                Exit For
            End If
        Next
		
        If 发现末尾店员 Then 
            Exit For
        End If
    Next
	
    If 发现末尾店员 Then 
        // 点他/她
        zm.Tap 餐厅萌物语全局参数["外出宣传页面_首个店员卡片中心坐标"]["x"] + 餐厅萌物语全局参数["外出宣传页面_店员卡片间距"]["x"] * 行数,_
			   餐厅萌物语全局参数["外出宣传页面_首个店员卡片中心坐标"]["y"] + 餐厅萌物语全局参数["外出宣传页面_店员卡片间距"]["y"] * 列数,_
			   "@外出宣传页面_末尾店员卡片"
        Delay 1000
    End If
	
    餐厅萌物语_工具_外出宣传店员选择 = 发现末尾店员
End Function
    
Function SetupCountdownMessage(next_task_name, countdown_total_seconds)
    Dim countdown_hours, countdown_minutes, countdown_seconds
	
    Do Until countdown_total_seconds <= 5
        countdown_hours = countdown_total_seconds \ 3600
        countdown_minutes = (countdown_total_seconds - countdown_hours * 3600) \ 60
        countdown_seconds = countdown_total_seconds - countdown_hours * 3600 - countdown_minutes * 60
        ShowMessage "下一项任务：【"&next_task_name&"】，倒计时：【"&countdown_hours&" 时 "&countdown_minutes&" 分 "&countdown_seconds&" 秒】", 4000
        Delay 5000
        countdown_total_seconds = countdown_total_seconds - 5
    Loop

    ShowMessage "下一项任务：【"&next_task_name&"】，倒计时：【0 时 0 分 "&countdown_total_seconds&" 秒】", 4000
    Delay countdown_total_seconds * 1000
End Function